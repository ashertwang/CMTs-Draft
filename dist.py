# -*- coding: utf-8 -*-
"""dist.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1faJ1cCZ4STV1bdqBskoRGGRV7CisMpLH
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('dist_ageosweight.csv')
age_data = df['Age'].dropna()
survival_data = df['Survival'].dropna()
weight_data = df['Weight (Kg)'].dropna()

sns.set(style="whitegrid", palette="deep")
fig, axes = plt.subplots(1, 3, figsize=(24, 8))

def add_value_labels(ax, spacing=5):
    for rect in ax.patches:
        y_value = rect.get_height()
        x_value = rect.get_x() + rect.get_width() / 2
        space = spacing
        va = 'bottom' if y_value >= 0 else 'top'
        label = "{:.0f}".format(y_value)
        ax.annotate(label, (x_value, y_value), xytext=(0, space), textcoords="offset points",
                    ha='center', va=va, fontsize=8, rotation=90)

sns.histplot(age_data, bins=20, kde=True, color='blue', edgecolor='black', ax=axes[0])
axes[0].set_title('Age Distribution', fontsize=16, fontweight='bold', pad=20)
axes[0].set_xlabel('Age (Years)', fontsize=12, fontweight='bold')
axes[0].set_ylabel('Frequency', fontsize=12, fontweight='bold')
add_value_labels(axes[0])

sns.histplot(weight_data, bins=20, kde=True, color='purple', edgecolor='black', ax=axes[1])
axes[1].set_title('Weight Distribution', fontsize=16, fontweight='bold', pad=20)
axes[1].set_xlabel('Weight (Kg)', fontsize=12, fontweight='bold')
axes[1].set_ylabel('Frequency', fontsize=12, fontweight='bold')
add_value_labels(axes[1])

bins = np.arange(0, survival_data.max() + 30, 30)
sns.histplot(survival_data, bins=bins, kde=True, color='orange', edgecolor='black', ax=axes[2])
axes[2].set_title('OS Distribution', fontsize=16, fontweight='bold', pad=20)
axes[2].set_xlabel('Overall Survival (Days)', fontsize=12, fontweight='bold')
axes[2].set_ylabel('Frequency', fontsize=12, fontweight='bold')
add_value_labels(axes[2])

for ax in axes:
    for line in ax.lines:
        line.set_color('gray')
    ax.tick_params(axis='both', which='major', labelsize=10)
    ax.xaxis.set_major_locator(plt.MaxNLocator(nbins=10))
    for label in ax.get_xticklabels():
        label.set_rotation(45)
        label.set_ha('right')

for i, data in enumerate([age_data, weight_data, survival_data]):
    stats = f"Mean: {data.mean():.2f}\nMedian: {data.median():.2f}\nStd Dev: {data.std():.2f}"
    axes[i].text(0.95, 0.95, stats, transform=axes[i].transAxes, verticalalignment='top', horizontalalignment='right',
                 bbox=dict(boxstyle='round,pad=0.5', facecolor='white', alpha=0.8), fontsize=10)

plt.tight_layout()
plt.show()